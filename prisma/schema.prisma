// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  meetups       Meetup[]
  participants  Participant[]
  invitations   Invitation[]
  notifications Notification[]
  userSettings  UserSettings?
  userProfile   UserProfile?
  coffeePreferences CoffeePreference[]
  reviews       Review[]
  favorites     Favorite[]
  photos        Photo[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Meetup {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  date        DateTime
  time        String
  duration    Int      // in minutes
  maxParticipants Int?
  location    String
  latitude    Float?
  longitude   Float?
  address     String?
  venue       String?
  venueType   VenueType @default(COFFEE_SHOP)
  category    MeetupCategory @default(SOCIAL)
  status      MeetupStatus @default(SCHEDULED)
  isPrivate   Boolean  @default(false)
  isRecurring Boolean  @default(false)
  recurrenceRule String?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime? // Soft delete for cancelled events
  createdBy   String
  createdByUser User @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  coffeeShopId String?
  coffeeShop   CoffeeShop? @relation(fields: [coffeeShopId], references: [id], onDelete: SetNull)

  participants Participant[]
  invitations  Invitation[]
  reviews      Review[]
  favorites    Favorite[]
  photos       Photo[]
  comments     Comment[]

  @@index([date])
  @@index([status])
  @@index([createdBy])
  @@index([venueType])
  @@index([category])
  @@index([deletedAt]) // Index for soft delete queries
}

model Participant {
  id        String   @id @default(cuid())
  meetupId  String
  userId    String
  role      ParticipantRole @default(ATTENDEE)
  status    ParticipantStatus @default(INVITED)
  joinedAt  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meetup Meetup @relation(fields: [meetupId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([meetupId, userId])
  @@index([meetupId])
  @@index([userId])
}

model Invitation {
  id        String   @id @default(cuid())
  meetupId  String
  userId    String?
  email     String
  token     String   @unique
  status    InvitationStatus @default(PENDING)
  sentAt    DateTime @default(now())
  respondedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meetup Meetup @relation(fields: [meetupId], references: [id], onDelete: Cascade)
  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([meetupId, email])
  @@index([token])
  @@index([status])
}

/// @policy read_public      public:true
/// @policy write_own        user_id = auth.uid()
model MeetupInvite {
  id              String    @id @default(cuid())
  token           String    @unique
  organizerName   String
  organizerEmail  String
  cafeId          String
  availableDates  String[]  // Array of ISO date strings
  chosenDate      String?   // ISO date string
  status          String    @default("pending") // pending, confirmed, expired
  expiresAt       DateTime
  confirmedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime? // Soft delete

  cafe CoffeeShop @relation(fields: [cafeId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([status])
  @@index([expiresAt])
  @@index([deletedAt])
}

model CoffeeShop {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  address     String
  latitude    Float
  longitude   Float
  phone       String?
  website     String?
  rating      Float    @default(0)
  reviewCount Int      @default(0)
  priceRange  PriceRange @default(MODERATE)
  features    String[] // wifi, parking, outdoor seating, etc.
  hours       Json?    // Store business hours as JSON
  photos      String[]
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  meetups     Meetup[]
  reviews     Review[]
  favorites   Favorite[]
  meetupInvites MeetupInvite[]

  @@index([latitude, longitude]) // Consider PostGIS GIN index for "caf√©s near me" queries
  @@index([rating])
  @@index([priceRange])
}

model CoffeePreference {
  id          String   @id @default(cuid())
  userId      String
  coffeeType  String   // espresso, latte, cappuccino, etc.
  milkType    String?  // whole, almond, oat, etc.
  sugarLevel  Int?     // 0-5 scale
  temperature String?  // hot, iced, warm
  size        String?  // small, medium, large
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, coffeeType])
  @@index([userId])
}

model Review {
  id          String   @id @default(cuid())
  meetupId    String?
  coffeeShopId String?
  userId      String
  rating      Int      // 1-5 scale
  comment     String?  @db.Text
  photos      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  meetup     Meetup?     @relation(fields: [meetupId], references: [id], onDelete: SetNull)
  coffeeShop CoffeeShop? @relation(fields: [coffeeShopId], references: [id], onDelete: SetNull)
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([meetupId])
  @@index([coffeeShopId])
  @@index([userId])
  @@index([rating])
}

model Favorite {
  id          String   @id @default(cuid())
  userId      String
  meetupId    String?
  coffeeShopId String?
  createdAt   DateTime @default(now())

  meetup     Meetup?     @relation(fields: [meetupId], references: [id], onDelete: Cascade)
  coffeeShop CoffeeShop? @relation(fields: [coffeeShopId], references: [id], onDelete: Cascade)
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, meetupId])
  @@unique([userId, coffeeShopId])
  @@index([userId])
}

model Photo {
  id        String   @id @default(cuid())
  meetupId  String
  userId    String
  url       String
  caption   String?
  createdAt DateTime @default(now())

  meetup Meetup @relation(fields: [meetupId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([meetupId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  meetupId  String
  userId    String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meetup Meetup @relation(fields: [meetupId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([meetupId])
  @@index([userId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

model UserSettings {
  id                    String  @id @default(cuid())
  userId                String  @unique
  timezone              String  @default("UTC")
  language              String  @default("en")
  theme                 Theme   @default(SYSTEM)
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(true)
  smsNotifications      Boolean @default(false)
  locationSharing       Boolean @default(true)
  maxTravelDistance     Int     @default(10) // in miles/km
  preferredVenueTypes   VenueType[]
  preferredCategories   MeetupCategory[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserProfile {
  id          String  @id @default(cuid())
  userId      String  @unique
  bio         String? @db.Text
  interests   String[] // Array of interests
  skills      String[] // Array of skills
  location    String?
  latitude    Float?
  longitude   Float?
  phone       String?
  website     String?
  socialLinks Json?    // Store social links as JSON
  availability Json?   // Store availability as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enums
enum MeetupStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum MeetupCategory {
  SOCIAL
  NETWORKING
  STUDY_GROUP
  BOOK_CLUB
  LANGUAGE_EXCHANGE
  TECH_MEETUP
  CREATIVE
  FITNESS
  FOOD_DRINK
  OTHER
}

enum VenueType {
  COFFEE_SHOP
  RESTAURANT
  BAR
  PARK
  LIBRARY
  COMMUNITY_CENTER
  OFFICE_SPACE
  OTHER
}

enum ParticipantRole {
  HOST
  CO_HOST
  ATTENDEE
  OBSERVER
}

enum ParticipantStatus {
  INVITED
  ACCEPTED
  DECLINED
  MAYBE
  ATTENDED
  NO_SHOW
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum NotificationType {
  MEETUP_INVITATION
  MEETUP_REMINDER
  MEETUP_CANCELLED
  MEETUP_RESCHEDULED
  PARTICIPANT_JOINED
  NEW_REVIEW
  COFFEE_SUGGESTION
  SYSTEM_UPDATE
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum PriceRange {
  BUDGET
  MODERATE
  EXPENSIVE
  LUXURY
} 